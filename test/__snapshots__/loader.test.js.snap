// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`loader should generate an error on broken code: errors 1`] = `
Array [
  "ModuleBuildError: Module build failed (from \`replaced original path\`):
CoffeeScriptError: /test/fixtures/broken.coffee:1:9: error: unexpected ;",
]
`;

exports[`loader should generate an error on broken code: warnings 1`] = `Array []`;

exports[`loader should throw an error on invalid CoffeeScript options: errors 1`] = `
Array [
  "ModuleBuildError: Module build failed (from \`replaced original path\`):
CoffeeScriptError: Error: Cannot find module '@babel/preset-env1' from ''",
]
`;

exports[`loader should throw an error on invalid CoffeeScript options: warnings 1`] = `Array []`;

exports[`loader should work and generate source maps (take value from the \`compiler.devtool\` option): errors 1`] = `Array []`;

exports[`loader should work and generate source maps (take value from the \`compiler.devtool\` option): source 1`] = `
"var cubes, list, math, num, number, opposite, race, square;

import * as local from './local-file.coffee';

number = 42;

opposite = true;

if (opposite) {
  // Conditions:
  number = -42;
}

// Functions:
square = function(x) {
  return x * x;
};

// Arrays:
list = [1, 2, 3, 4, 5];

// Objects:
math = {
  root: Math.sqrt,
  square: square,
  cube: function(x) {
    return x * square(x);
  }
};

// Splats:
race = function(winner, ...runners) {
  return print(winner, runners);
};

if (typeof elvis !== \\"undefined\\" && elvis !== null) {
  // Existence:
  alert(\\"I knew it!\\");
}

// Array comprehensions:
cubes = (function() {
  var i, len, results;
  results = [];
  for (i = 0, len = list.length; i < len; i++) {
    num = list[i];
    results.push(math.cube(num));
  }
  return results;
})();

export default {number, opposite, square, list, math, race, cubes, local};
"
`;

exports[`loader should work and generate source maps (take value from the \`compiler.devtool\` option): sourceMap 1`] = `
Object {
  "mappings": "AAAA,IAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,MAAA,EAAA,QAAA,EAAA,IAAA,EAAA;;AAAA,OAAO,CAAA,SAAP,MAAA;;AAGA,MAAA,GAAW;;AACX,QAAA,GAAW;;AAGX,IAAgB,QAAhB;;EAAA,MAAA,GAAS,CAAC,GAAV;CAPA;;;AAUA,MAAA,GAAS,QAAA,CAAC,CAAD,CAAA;SAAO,CAAA,GAAI;AAAX,EAVT;;;AAaA,IAAA,GAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAbP;;;AAgBA,IAAA,GACE;EAAA,IAAA,EAAQ,IAAI,CAAC,IAAb;EACA,MAAA,EAAQ,MADR;EAEA,IAAA,EAAQ,QAAA,CAAC,CAAD,CAAA;WAAO,CAAA,GAAI,MAAA,CAAO,CAAP;EAAX;AAFR,EAjBF;;;AAsBA,IAAA,GAAO,QAAA,CAAC,MAAD,EAAA,GAAS,OAAT,CAAA;SACL,KAAA,CAAM,MAAN,EAAc,OAAd;AADK;;AAIP,IAAsB,8CAAtB;;EAAA,KAAA,CAAM,YAAN,EAAA;CA1BA;;;AA6BA,KAAA;;AAAS;EAAA,KAAA,sCAAA;;iBAAA,IAAI,CAAC,IAAL,CAAU,GAAV;EAAA,CAAA;;;;AAET,OAAA,QAAe,CAAE,MAAF,EAAU,QAAV,EAAoB,MAApB,EAA4B,IAA5B,EAAkC,IAAlC,EAAwC,IAAxC,EAA8C,KAA9C,EAAqD,KAArD",
  "names": Array [],
  "sourceRoot": "",
  "sources": Array [
    "/absolute/path/to/test/fixtures/foo.coffee",
  ],
  "sourcesContent": Array [
    "import * as local from './local-file.coffee';

# Assignment:
number   = 42
opposite = true

# Conditions:
number = -42 if opposite

# Functions:
square = (x) -> x * x

# Arrays:
list = [1, 2, 3, 4, 5]

# Objects:
math =
  root:   Math.sqrt
  square: square
  cube:   (x) -> x * square x

# Splats:
race = (winner, runners...) ->
  print winner, runners

# Existence:
alert \\"I knew it!\\" if elvis?

# Array comprehensions:
cubes = (math.cube num for num in list)

export default { number, opposite, square, list, math, race, cubes, local }
",
  ],
  "version": 3,
}
`;

exports[`loader should work and generate source maps (take value from the \`compiler.devtool\` option): warnings 1`] = `Array []`;

exports[`loader should work and generate source maps (take value from the \`sourceMap\` option): errors 1`] = `Array []`;

exports[`loader should work and generate source maps (take value from the \`sourceMap\` option): source 1`] = `
"var cubes, list, math, num, number, opposite, race, square;

import * as local from './local-file.coffee';

number = 42;

opposite = true;

if (opposite) {
  // Conditions:
  number = -42;
}

// Functions:
square = function(x) {
  return x * x;
};

// Arrays:
list = [1, 2, 3, 4, 5];

// Objects:
math = {
  root: Math.sqrt,
  square: square,
  cube: function(x) {
    return x * square(x);
  }
};

// Splats:
race = function(winner, ...runners) {
  return print(winner, runners);
};

if (typeof elvis !== \\"undefined\\" && elvis !== null) {
  // Existence:
  alert(\\"I knew it!\\");
}

// Array comprehensions:
cubes = (function() {
  var i, len, results;
  results = [];
  for (i = 0, len = list.length; i < len; i++) {
    num = list[i];
    results.push(math.cube(num));
  }
  return results;
})();

export default {number, opposite, square, list, math, race, cubes, local};
"
`;

exports[`loader should work and generate source maps (take value from the \`sourceMap\` option): sourceMap 1`] = `
Object {
  "mappings": "AAAA,IAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,MAAA,EAAA,QAAA,EAAA,IAAA,EAAA;;AAAA,OAAO,CAAA,SAAP,MAAA;;AAGA,MAAA,GAAW;;AACX,QAAA,GAAW;;AAGX,IAAgB,QAAhB;;EAAA,MAAA,GAAS,CAAC,GAAV;CAPA;;;AAUA,MAAA,GAAS,QAAA,CAAC,CAAD,CAAA;SAAO,CAAA,GAAI;AAAX,EAVT;;;AAaA,IAAA,GAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAbP;;;AAgBA,IAAA,GACE;EAAA,IAAA,EAAQ,IAAI,CAAC,IAAb;EACA,MAAA,EAAQ,MADR;EAEA,IAAA,EAAQ,QAAA,CAAC,CAAD,CAAA;WAAO,CAAA,GAAI,MAAA,CAAO,CAAP;EAAX;AAFR,EAjBF;;;AAsBA,IAAA,GAAO,QAAA,CAAC,MAAD,EAAA,GAAS,OAAT,CAAA;SACL,KAAA,CAAM,MAAN,EAAc,OAAd;AADK;;AAIP,IAAsB,8CAAtB;;EAAA,KAAA,CAAM,YAAN,EAAA;CA1BA;;;AA6BA,KAAA;;AAAS;EAAA,KAAA,sCAAA;;iBAAA,IAAI,CAAC,IAAL,CAAU,GAAV;EAAA,CAAA;;;;AAET,OAAA,QAAe,CAAE,MAAF,EAAU,QAAV,EAAoB,MAApB,EAA4B,IAA5B,EAAkC,IAAlC,EAAwC,IAAxC,EAA8C,KAA9C,EAAqD,KAArD",
  "names": Array [],
  "sourceRoot": "",
  "sources": Array [
    "/absolute/path/to/test/fixtures/foo.coffee",
  ],
  "sourcesContent": Array [
    "import * as local from './local-file.coffee';

# Assignment:
number   = 42
opposite = true

# Conditions:
number = -42 if opposite

# Functions:
square = (x) -> x * x

# Arrays:
list = [1, 2, 3, 4, 5]

# Objects:
math =
  root:   Math.sqrt
  square: square
  cube:   (x) -> x * square x

# Splats:
race = (winner, runners...) ->
  print winner, runners

# Existence:
alert \\"I knew it!\\" if elvis?

# Array comprehensions:
cubes = (math.cube num for num in list)

export default { number, opposite, square, list, math, race, cubes, local }
",
  ],
  "version": 3,
}
`;

exports[`loader should work and generate source maps (take value from the \`sourceMap\` option): warnings 1`] = `Array []`;

exports[`loader should work and generate source maps (the \`sourceMap\` option prefer over the \`compiler.devtool\` option): errors 1`] = `Array []`;

exports[`loader should work and generate source maps (the \`sourceMap\` option prefer over the \`compiler.devtool\` option): source 1`] = `
"var cubes, list, math, num, number, opposite, race, square;

import * as local from './local-file.coffee';

number = 42;

opposite = true;

if (opposite) {
  // Conditions:
  number = -42;
}

// Functions:
square = function(x) {
  return x * x;
};

// Arrays:
list = [1, 2, 3, 4, 5];

// Objects:
math = {
  root: Math.sqrt,
  square: square,
  cube: function(x) {
    return x * square(x);
  }
};

// Splats:
race = function(winner, ...runners) {
  return print(winner, runners);
};

if (typeof elvis !== \\"undefined\\" && elvis !== null) {
  // Existence:
  alert(\\"I knew it!\\");
}

// Array comprehensions:
cubes = (function() {
  var i, len, results;
  results = [];
  for (i = 0, len = list.length; i < len; i++) {
    num = list[i];
    results.push(math.cube(num));
  }
  return results;
})();

export default {number, opposite, square, list, math, race, cubes, local};
"
`;

exports[`loader should work and generate source maps (the \`sourceMap\` option prefer over the \`compiler.devtool\` option): sourceMap 1`] = `
Object {
  "mappings": "AAAA,IAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,MAAA,EAAA,QAAA,EAAA,IAAA,EAAA;;AAAA,OAAO,CAAA,SAAP,MAAA;;AAGA,MAAA,GAAW;;AACX,QAAA,GAAW;;AAGX,IAAgB,QAAhB;;EAAA,MAAA,GAAS,CAAC,GAAV;CAPA;;;AAUA,MAAA,GAAS,QAAA,CAAC,CAAD,CAAA;SAAO,CAAA,GAAI;AAAX,EAVT;;;AAaA,IAAA,GAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAbP;;;AAgBA,IAAA,GACE;EAAA,IAAA,EAAQ,IAAI,CAAC,IAAb;EACA,MAAA,EAAQ,MADR;EAEA,IAAA,EAAQ,QAAA,CAAC,CAAD,CAAA;WAAO,CAAA,GAAI,MAAA,CAAO,CAAP;EAAX;AAFR,EAjBF;;;AAsBA,IAAA,GAAO,QAAA,CAAC,MAAD,EAAA,GAAS,OAAT,CAAA;SACL,KAAA,CAAM,MAAN,EAAc,OAAd;AADK;;AAIP,IAAsB,8CAAtB;;EAAA,KAAA,CAAM,YAAN,EAAA;CA1BA;;;AA6BA,KAAA;;AAAS;EAAA,KAAA,sCAAA;;iBAAA,IAAI,CAAC,IAAL,CAAU,GAAV;EAAA,CAAA;;;;AAET,OAAA,QAAe,CAAE,MAAF,EAAU,QAAV,EAAoB,MAApB,EAA4B,IAA5B,EAAkC,IAAlC,EAAwC,IAAxC,EAA8C,KAA9C,EAAqD,KAArD",
  "names": Array [],
  "sourceRoot": "",
  "sources": Array [
    "/absolute/path/to/test/fixtures/foo.coffee",
  ],
  "sourcesContent": Array [
    "import * as local from './local-file.coffee';

# Assignment:
number   = 42
opposite = true

# Conditions:
number = -42 if opposite

# Functions:
square = (x) -> x * x

# Arrays:
list = [1, 2, 3, 4, 5]

# Objects:
math =
  root:   Math.sqrt
  square: square
  cube:   (x) -> x * square x

# Splats:
race = (winner, runners...) ->
  print winner, runners

# Existence:
alert \\"I knew it!\\" if elvis?

# Array comprehensions:
cubes = (math.cube num for num in list)

export default { number, opposite, square, list, math, race, cubes, local }
",
  ],
  "version": 3,
}
`;

exports[`loader should work and generate source maps (the \`sourceMap\` option prefer over the \`compiler.devtool\` option): warnings 1`] = `Array []`;

exports[`loader should work and ignore unknown CoffeeScript options: errors 1`] = `Array []`;

exports[`loader should work and ignore unknown CoffeeScript options: source 1`] = `
"var cubes, list, math, num, number, opposite, race, square;

import * as local from './local-file.coffee';

number = 42;

opposite = true;

if (opposite) {
  // Conditions:
  number = -42;
}

// Functions:
square = function(x) {
  return x * x;
};

// Arrays:
list = [1, 2, 3, 4, 5];

// Objects:
math = {
  root: Math.sqrt,
  square: square,
  cube: function(x) {
    return x * square(x);
  }
};

// Splats:
race = function(winner, ...runners) {
  return print(winner, runners);
};

if (typeof elvis !== \\"undefined\\" && elvis !== null) {
  // Existence:
  alert(\\"I knew it!\\");
}

// Array comprehensions:
cubes = (function() {
  var i, len, results;
  results = [];
  for (i = 0, len = list.length; i < len; i++) {
    num = list[i];
    results.push(math.cube(num));
  }
  return results;
})();

export default {number, opposite, square, list, math, race, cubes, local};
"
`;

exports[`loader should work and ignore unknown CoffeeScript options: sourceMap 1`] = `undefined`;

exports[`loader should work and ignore unknown CoffeeScript options: warnings 1`] = `Array []`;

exports[`loader should work and not generate source maps (take value from the \`compiler.devtool\` option): errors 1`] = `Array []`;

exports[`loader should work and not generate source maps (take value from the \`compiler.devtool\` option): source 1`] = `
"var cubes, list, math, num, number, opposite, race, square;

import * as local from './local-file.coffee';

number = 42;

opposite = true;

if (opposite) {
  // Conditions:
  number = -42;
}

// Functions:
square = function(x) {
  return x * x;
};

// Arrays:
list = [1, 2, 3, 4, 5];

// Objects:
math = {
  root: Math.sqrt,
  square: square,
  cube: function(x) {
    return x * square(x);
  }
};

// Splats:
race = function(winner, ...runners) {
  return print(winner, runners);
};

if (typeof elvis !== \\"undefined\\" && elvis !== null) {
  // Existence:
  alert(\\"I knew it!\\");
}

// Array comprehensions:
cubes = (function() {
  var i, len, results;
  results = [];
  for (i = 0, len = list.length; i < len; i++) {
    num = list[i];
    results.push(math.cube(num));
  }
  return results;
})();

export default {number, opposite, square, list, math, race, cubes, local};
"
`;

exports[`loader should work and not generate source maps (take value from the \`compiler.devtool\` option): sourceMap 1`] = `undefined`;

exports[`loader should work and not generate source maps (take value from the \`compiler.devtool\` option): warnings 1`] = `Array []`;

exports[`loader should work and not generate source maps (take value from the \`sourceMap\` option): errors 1`] = `Array []`;

exports[`loader should work and not generate source maps (take value from the \`sourceMap\` option): source 1`] = `
"var cubes, list, math, num, number, opposite, race, square;

import * as local from './local-file.coffee';

number = 42;

opposite = true;

if (opposite) {
  // Conditions:
  number = -42;
}

// Functions:
square = function(x) {
  return x * x;
};

// Arrays:
list = [1, 2, 3, 4, 5];

// Objects:
math = {
  root: Math.sqrt,
  square: square,
  cube: function(x) {
    return x * square(x);
  }
};

// Splats:
race = function(winner, ...runners) {
  return print(winner, runners);
};

if (typeof elvis !== \\"undefined\\" && elvis !== null) {
  // Existence:
  alert(\\"I knew it!\\");
}

// Array comprehensions:
cubes = (function() {
  var i, len, results;
  results = [];
  for (i = 0, len = list.length; i < len; i++) {
    num = list[i];
    results.push(math.cube(num));
  }
  return results;
})();

export default {number, opposite, square, list, math, race, cubes, local};
"
`;

exports[`loader should work and not generate source maps (take value from the \`sourceMap\` option): sourceMap 1`] = `undefined`;

exports[`loader should work and not generate source maps (take value from the \`sourceMap\` option): warnings 1`] = `Array []`;

exports[`loader should work and support CoffeeScript options: errors 1`] = `Array []`;

exports[`loader should work and support CoffeeScript options: source 1`] = `
"\\"use strict\\";

function _typeof(obj) { \\"@babel/helpers - typeof\\"; if (typeof Symbol === \\"function\\" && typeof Symbol.iterator === \\"symbol\\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \\"function\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\"symbol\\" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});
exports[\\"default\\"] = void 0;

var local = _interopRequireWildcard(require(\\"./local-file.coffee\\"));

function _getRequireWildcardCache() { if (typeof WeakMap !== \\"function\\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \\"object\\" && typeof obj !== \\"function\\") { return { \\"default\\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\\"default\\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var cubes, list, math, num, number, opposite, race, square;
number = 42;
opposite = true;

if (opposite) {
  // Conditions:
  number = -42;
} // Functions:


square = function square(x) {
  return x * x;
}; // Arrays:


list = [1, 2, 3, 4, 5]; // Objects:

math = {
  root: Math.sqrt,
  square: square,
  cube: function cube(x) {
    return x * square(x);
  }
}; // Splats:

race = function race(winner) {
  for (var _len = arguments.length, runners = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    runners[_key - 1] = arguments[_key];
  }

  return print(winner, runners);
};

if (typeof elvis !== \\"undefined\\" && elvis !== null) {
  // Existence:
  alert(\\"I knew it!\\");
} // Array comprehensions:


cubes = function () {
  var i, len, results;
  results = [];

  for (i = 0, len = list.length; i < len; i++) {
    num = list[i];
    results.push(math.cube(num));
  }

  return results;
}();

var _default = {
  number: number,
  opposite: opposite,
  square: square,
  list: list,
  math: math,
  race: race,
  cubes: cubes,
  local: local
};
exports[\\"default\\"] = _default;"
`;

exports[`loader should work and support CoffeeScript options: sourceMap 1`] = `undefined`;

exports[`loader should work and support CoffeeScript options: warnings 1`] = `Array []`;

exports[`loader should work: errors 1`] = `Array []`;

exports[`loader should work: source 1`] = `
"var cubes, list, math, num, number, opposite, race, square;

import * as local from './local-file.coffee';

number = 42;

opposite = true;

if (opposite) {
  // Conditions:
  number = -42;
}

// Functions:
square = function(x) {
  return x * x;
};

// Arrays:
list = [1, 2, 3, 4, 5];

// Objects:
math = {
  root: Math.sqrt,
  square: square,
  cube: function(x) {
    return x * square(x);
  }
};

// Splats:
race = function(winner, ...runners) {
  return print(winner, runners);
};

if (typeof elvis !== \\"undefined\\" && elvis !== null) {
  // Existence:
  alert(\\"I knew it!\\");
}

// Array comprehensions:
cubes = (function() {
  var i, len, results;
  results = [];
  for (i = 0, len = list.length; i < len; i++) {
    num = list[i];
    results.push(math.cube(num));
  }
  return results;
})();

export default {number, opposite, square, list, math, race, cubes, local};
"
`;

exports[`loader should work: sourceMap 1`] = `undefined`;

exports[`loader should work: warnings 1`] = `Array []`;
