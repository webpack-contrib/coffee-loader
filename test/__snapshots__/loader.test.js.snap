// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`loader should generate an error on broken code: errors 1`] = `
[
  "ModuleBuildError: Module build failed (from \`replaced original path\`):
CoffeeScriptError: /test/fixtures/broken.coffee:1:9: error: unexpected ;",
]
`;

exports[`loader should generate an error on broken code: warnings 1`] = `[]`;

exports[`loader should throw an error on invalid CoffeeScript options: errors 1`] = `
[
  "ModuleBuildError: Module build failed (from \`replaced original path\`):
CoffeeScriptError: Error: Cannot resolve module '@babel/preset-env1' from paths [''] from /node_modules/@babel/core/lib/config/files/plugins.js",
]
`;

exports[`loader should throw an error on invalid CoffeeScript options: warnings 1`] = `[]`;

exports[`loader should work and code without the top-level function safety wrapper: errors 1`] = `[]`;

exports[`loader should work and code without the top-level function safety wrapper: source 1`] = `
"var changeNumbers, inner, outer;

outer = 1;

changeNumbers = function() {
  var inner;
  inner = -1;
  return outer = 10;
};

inner = changeNumbers();
"
`;

exports[`loader should work and code without the top-level function safety wrapper: sourceMap 1`] = `undefined`;

exports[`loader should work and code without the top-level function safety wrapper: warnings 1`] = `[]`;

exports[`loader should work and generate source maps (take value from the \`compiler.devtool\` option): errors 1`] = `[]`;

exports[`loader should work and generate source maps (take value from the \`compiler.devtool\` option): source 1`] = `
"var cubes, list, math, num, number, opposite, race, square;

import * as local from './local-file.coffee';

number = 42;

opposite = true;

if (opposite) {
  // Conditions:
  number = -42;
}

// Functions:
square = function(x) {
  return x * x;
};

// Arrays:
list = [1, 2, 3, 4, 5];

// Objects:
math = {
  root: Math.sqrt,
  square: square,
  cube: function(x) {
    return x * square(x);
  }
};

// Splats:
race = function(winner, ...runners) {
  return print(winner, runners);
};

if (typeof elvis !== "undefined" && elvis !== null) {
  // Existence:
  alert("I knew it!");
}

// Array comprehensions:
cubes = (function() {
  var i, len, results;
  results = [];
  for (i = 0, len = list.length; i < len; i++) {
    num = list[i];
    results.push(math.cube(num));
  }
  return results;
})();

export default {number, opposite, square, list, math, race, cubes, local};
"
`;

exports[`loader should work and generate source maps (take value from the \`compiler.devtool\` option): sourceMap 1`] = `
{
  "mappings": "AAAA,IAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,MAAA,EAAA,QAAA,EAAA,IAAA,EAAA;;AAAA,OAAO,CAAA,SAAP,MAAA;;AAGA,MAAA,GAAW;;AACX,QAAA,GAAW;;AAGX,IAAgB,QAAhB;;EAAA,MAAA,GAAS,CAAC,GAAV;CAPA;;;AAUA,MAAA,GAAS,QAAA,CAAC,CAAD,CAAA;SAAO,CAAA,GAAI;AAAX,EAVT;;;AAaA,IAAA,GAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAbP;;;AAgBA,IAAA,GACE;EAAA,IAAA,EAAQ,IAAI,CAAC,IAAb;EACA,MAAA,EAAQ,MADR;EAEA,IAAA,EAAQ,QAAA,CAAC,CAAD,CAAA;WAAO,CAAA,GAAI,MAAA,CAAO,CAAP;EAAX;AAFR,EAjBF;;;AAsBA,IAAA,GAAO,QAAA,CAAC,MAAD,EAAA,GAAS,OAAT,CAAA;SACL,KAAA,CAAM,MAAN,EAAc,OAAd;AADK;;AAIP,IAAsB,8CAAtB;;EAAA,KAAA,CAAM,YAAN,EAAA;CA1BA;;;AA6BA,KAAA;;AAAS;EAAA,KAAA,sCAAA;;iBAAA,IAAI,CAAC,IAAL,CAAU,GAAV;EAAA,CAAA;;;;AAET,OAAA,QAAe,CAAE,MAAF,EAAU,QAAV,EAAoB,MAApB,EAA4B,IAA5B,EAAkC,IAAlC,EAAwC,IAAxC,EAA8C,KAA9C,EAAqD,KAArD",
  "names": [],
  "sourceRoot": "",
  "sources": [
    "/absolute/path/to/test/fixtures/foo.coffee",
  ],
  "sourcesContent": [
    "import * as local from './local-file.coffee';

# Assignment:
number   = 42
opposite = true

# Conditions:
number = -42 if opposite

# Functions:
square = (x) -> x * x

# Arrays:
list = [1, 2, 3, 4, 5]

# Objects:
math =
  root:   Math.sqrt
  square: square
  cube:   (x) -> x * square x

# Splats:
race = (winner, runners...) ->
  print winner, runners

# Existence:
alert "I knew it!" if elvis?

# Array comprehensions:
cubes = (math.cube num for num in list)

export default { number, opposite, square, list, math, race, cubes, local }
",
  ],
  "version": 3,
}
`;

exports[`loader should work and generate source maps (take value from the \`compiler.devtool\` option): warnings 1`] = `[]`;

exports[`loader should work and generate source maps (take value from the \`sourceMap\` option): errors 1`] = `[]`;

exports[`loader should work and generate source maps (take value from the \`sourceMap\` option): source 1`] = `
"var cubes, list, math, num, number, opposite, race, square;

import * as local from './local-file.coffee';

number = 42;

opposite = true;

if (opposite) {
  // Conditions:
  number = -42;
}

// Functions:
square = function(x) {
  return x * x;
};

// Arrays:
list = [1, 2, 3, 4, 5];

// Objects:
math = {
  root: Math.sqrt,
  square: square,
  cube: function(x) {
    return x * square(x);
  }
};

// Splats:
race = function(winner, ...runners) {
  return print(winner, runners);
};

if (typeof elvis !== "undefined" && elvis !== null) {
  // Existence:
  alert("I knew it!");
}

// Array comprehensions:
cubes = (function() {
  var i, len, results;
  results = [];
  for (i = 0, len = list.length; i < len; i++) {
    num = list[i];
    results.push(math.cube(num));
  }
  return results;
})();

export default {number, opposite, square, list, math, race, cubes, local};
"
`;

exports[`loader should work and generate source maps (take value from the \`sourceMap\` option): sourceMap 1`] = `
{
  "mappings": "AAAA,IAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,MAAA,EAAA,QAAA,EAAA,IAAA,EAAA;;AAAA,OAAO,CAAA,SAAP,MAAA;;AAGA,MAAA,GAAW;;AACX,QAAA,GAAW;;AAGX,IAAgB,QAAhB;;EAAA,MAAA,GAAS,CAAC,GAAV;CAPA;;;AAUA,MAAA,GAAS,QAAA,CAAC,CAAD,CAAA;SAAO,CAAA,GAAI;AAAX,EAVT;;;AAaA,IAAA,GAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAbP;;;AAgBA,IAAA,GACE;EAAA,IAAA,EAAQ,IAAI,CAAC,IAAb;EACA,MAAA,EAAQ,MADR;EAEA,IAAA,EAAQ,QAAA,CAAC,CAAD,CAAA;WAAO,CAAA,GAAI,MAAA,CAAO,CAAP;EAAX;AAFR,EAjBF;;;AAsBA,IAAA,GAAO,QAAA,CAAC,MAAD,EAAA,GAAS,OAAT,CAAA;SACL,KAAA,CAAM,MAAN,EAAc,OAAd;AADK;;AAIP,IAAsB,8CAAtB;;EAAA,KAAA,CAAM,YAAN,EAAA;CA1BA;;;AA6BA,KAAA;;AAAS;EAAA,KAAA,sCAAA;;iBAAA,IAAI,CAAC,IAAL,CAAU,GAAV;EAAA,CAAA;;;;AAET,OAAA,QAAe,CAAE,MAAF,EAAU,QAAV,EAAoB,MAApB,EAA4B,IAA5B,EAAkC,IAAlC,EAAwC,IAAxC,EAA8C,KAA9C,EAAqD,KAArD",
  "names": [],
  "sourceRoot": "",
  "sources": [
    "/absolute/path/to/test/fixtures/foo.coffee",
  ],
  "sourcesContent": [
    "import * as local from './local-file.coffee';

# Assignment:
number   = 42
opposite = true

# Conditions:
number = -42 if opposite

# Functions:
square = (x) -> x * x

# Arrays:
list = [1, 2, 3, 4, 5]

# Objects:
math =
  root:   Math.sqrt
  square: square
  cube:   (x) -> x * square x

# Splats:
race = (winner, runners...) ->
  print winner, runners

# Existence:
alert "I knew it!" if elvis?

# Array comprehensions:
cubes = (math.cube num for num in list)

export default { number, opposite, square, list, math, race, cubes, local }
",
  ],
  "version": 3,
}
`;

exports[`loader should work and generate source maps (take value from the \`sourceMap\` option): warnings 1`] = `[]`;

exports[`loader should work and generate source maps (the \`sourceMap\` option prefer over the \`compiler.devtool\` option): errors 1`] = `[]`;

exports[`loader should work and generate source maps (the \`sourceMap\` option prefer over the \`compiler.devtool\` option): source 1`] = `
"var cubes, list, math, num, number, opposite, race, square;

import * as local from './local-file.coffee';

number = 42;

opposite = true;

if (opposite) {
  // Conditions:
  number = -42;
}

// Functions:
square = function(x) {
  return x * x;
};

// Arrays:
list = [1, 2, 3, 4, 5];

// Objects:
math = {
  root: Math.sqrt,
  square: square,
  cube: function(x) {
    return x * square(x);
  }
};

// Splats:
race = function(winner, ...runners) {
  return print(winner, runners);
};

if (typeof elvis !== "undefined" && elvis !== null) {
  // Existence:
  alert("I knew it!");
}

// Array comprehensions:
cubes = (function() {
  var i, len, results;
  results = [];
  for (i = 0, len = list.length; i < len; i++) {
    num = list[i];
    results.push(math.cube(num));
  }
  return results;
})();

export default {number, opposite, square, list, math, race, cubes, local};
"
`;

exports[`loader should work and generate source maps (the \`sourceMap\` option prefer over the \`compiler.devtool\` option): sourceMap 1`] = `
{
  "mappings": "AAAA,IAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,MAAA,EAAA,QAAA,EAAA,IAAA,EAAA;;AAAA,OAAO,CAAA,SAAP,MAAA;;AAGA,MAAA,GAAW;;AACX,QAAA,GAAW;;AAGX,IAAgB,QAAhB;;EAAA,MAAA,GAAS,CAAC,GAAV;CAPA;;;AAUA,MAAA,GAAS,QAAA,CAAC,CAAD,CAAA;SAAO,CAAA,GAAI;AAAX,EAVT;;;AAaA,IAAA,GAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAbP;;;AAgBA,IAAA,GACE;EAAA,IAAA,EAAQ,IAAI,CAAC,IAAb;EACA,MAAA,EAAQ,MADR;EAEA,IAAA,EAAQ,QAAA,CAAC,CAAD,CAAA;WAAO,CAAA,GAAI,MAAA,CAAO,CAAP;EAAX;AAFR,EAjBF;;;AAsBA,IAAA,GAAO,QAAA,CAAC,MAAD,EAAA,GAAS,OAAT,CAAA;SACL,KAAA,CAAM,MAAN,EAAc,OAAd;AADK;;AAIP,IAAsB,8CAAtB;;EAAA,KAAA,CAAM,YAAN,EAAA;CA1BA;;;AA6BA,KAAA;;AAAS;EAAA,KAAA,sCAAA;;iBAAA,IAAI,CAAC,IAAL,CAAU,GAAV;EAAA,CAAA;;;;AAET,OAAA,QAAe,CAAE,MAAF,EAAU,QAAV,EAAoB,MAApB,EAA4B,IAA5B,EAAkC,IAAlC,EAAwC,IAAxC,EAA8C,KAA9C,EAAqD,KAArD",
  "names": [],
  "sourceRoot": "",
  "sources": [
    "/absolute/path/to/test/fixtures/foo.coffee",
  ],
  "sourcesContent": [
    "import * as local from './local-file.coffee';

# Assignment:
number   = 42
opposite = true

# Conditions:
number = -42 if opposite

# Functions:
square = (x) -> x * x

# Arrays:
list = [1, 2, 3, 4, 5]

# Objects:
math =
  root:   Math.sqrt
  square: square
  cube:   (x) -> x * square x

# Splats:
race = (winner, runners...) ->
  print winner, runners

# Existence:
alert "I knew it!" if elvis?

# Array comprehensions:
cubes = (math.cube num for num in list)

export default { number, opposite, square, list, math, race, cubes, local }
",
  ],
  "version": 3,
}
`;

exports[`loader should work and generate source maps (the \`sourceMap\` option prefer over the \`compiler.devtool\` option): warnings 1`] = `[]`;

exports[`loader should work and ignore unknown CoffeeScript options: errors 1`] = `[]`;

exports[`loader should work and ignore unknown CoffeeScript options: source 1`] = `
"var cubes, list, math, num, number, opposite, race, square;

import * as local from './local-file.coffee';

number = 42;

opposite = true;

if (opposite) {
  // Conditions:
  number = -42;
}

// Functions:
square = function(x) {
  return x * x;
};

// Arrays:
list = [1, 2, 3, 4, 5];

// Objects:
math = {
  root: Math.sqrt,
  square: square,
  cube: function(x) {
    return x * square(x);
  }
};

// Splats:
race = function(winner, ...runners) {
  return print(winner, runners);
};

if (typeof elvis !== "undefined" && elvis !== null) {
  // Existence:
  alert("I knew it!");
}

// Array comprehensions:
cubes = (function() {
  var i, len, results;
  results = [];
  for (i = 0, len = list.length; i < len; i++) {
    num = list[i];
    results.push(math.cube(num));
  }
  return results;
})();

export default {number, opposite, square, list, math, race, cubes, local};
"
`;

exports[`loader should work and ignore unknown CoffeeScript options: sourceMap 1`] = `undefined`;

exports[`loader should work and ignore unknown CoffeeScript options: warnings 1`] = `[]`;

exports[`loader should work and not generate source maps (take value from the \`compiler.devtool\` option): errors 1`] = `[]`;

exports[`loader should work and not generate source maps (take value from the \`compiler.devtool\` option): source 1`] = `
"var cubes, list, math, num, number, opposite, race, square;

import * as local from './local-file.coffee';

number = 42;

opposite = true;

if (opposite) {
  // Conditions:
  number = -42;
}

// Functions:
square = function(x) {
  return x * x;
};

// Arrays:
list = [1, 2, 3, 4, 5];

// Objects:
math = {
  root: Math.sqrt,
  square: square,
  cube: function(x) {
    return x * square(x);
  }
};

// Splats:
race = function(winner, ...runners) {
  return print(winner, runners);
};

if (typeof elvis !== "undefined" && elvis !== null) {
  // Existence:
  alert("I knew it!");
}

// Array comprehensions:
cubes = (function() {
  var i, len, results;
  results = [];
  for (i = 0, len = list.length; i < len; i++) {
    num = list[i];
    results.push(math.cube(num));
  }
  return results;
})();

export default {number, opposite, square, list, math, race, cubes, local};
"
`;

exports[`loader should work and not generate source maps (take value from the \`compiler.devtool\` option): sourceMap 1`] = `undefined`;

exports[`loader should work and not generate source maps (take value from the \`compiler.devtool\` option): warnings 1`] = `[]`;

exports[`loader should work and not generate source maps (take value from the \`sourceMap\` option): errors 1`] = `[]`;

exports[`loader should work and not generate source maps (take value from the \`sourceMap\` option): source 1`] = `
"var cubes, list, math, num, number, opposite, race, square;

import * as local from './local-file.coffee';

number = 42;

opposite = true;

if (opposite) {
  // Conditions:
  number = -42;
}

// Functions:
square = function(x) {
  return x * x;
};

// Arrays:
list = [1, 2, 3, 4, 5];

// Objects:
math = {
  root: Math.sqrt,
  square: square,
  cube: function(x) {
    return x * square(x);
  }
};

// Splats:
race = function(winner, ...runners) {
  return print(winner, runners);
};

if (typeof elvis !== "undefined" && elvis !== null) {
  // Existence:
  alert("I knew it!");
}

// Array comprehensions:
cubes = (function() {
  var i, len, results;
  results = [];
  for (i = 0, len = list.length; i < len; i++) {
    num = list[i];
    results.push(math.cube(num));
  }
  return results;
})();

export default {number, opposite, square, list, math, race, cubes, local};
"
`;

exports[`loader should work and not generate source maps (take value from the \`sourceMap\` option): sourceMap 1`] = `undefined`;

exports[`loader should work and not generate source maps (take value from the \`sourceMap\` option): warnings 1`] = `[]`;

exports[`loader should work and support CoffeeScript options: errors 1`] = `[]`;

exports[`loader should work and support CoffeeScript options: source 1`] = `
""use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var local = _interopRequireWildcard(require("./local-file.coffee"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var cubes, list, math, num, number, opposite, race, square;
number = 42;
opposite = true;
if (opposite) {
  // Conditions:
  number = -42;
}

// Functions:
square = function square(x) {
  return x * x;
};

// Arrays:
list = [1, 2, 3, 4, 5];

// Objects:
math = {
  root: Math.sqrt,
  square: square,
  cube: function cube(x) {
    return x * square(x);
  }
};

// Splats:
race = function race(winner) {
  for (var _len = arguments.length, runners = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    runners[_key - 1] = arguments[_key];
  }
  return print(winner, runners);
};
if (typeof elvis !== "undefined" && elvis !== null) {
  // Existence:
  alert("I knew it!");
}

// Array comprehensions:
cubes = function () {
  var i, len, results;
  results = [];
  for (i = 0, len = list.length; i < len; i++) {
    num = list[i];
    results.push(math.cube(num));
  }
  return results;
}();
var _default = {
  number: number,
  opposite: opposite,
  square: square,
  list: list,
  math: math,
  race: race,
  cubes: cubes,
  local: local
};
exports["default"] = _default;"
`;

exports[`loader should work and support CoffeeScript options: sourceMap 1`] = `undefined`;

exports[`loader should work and support CoffeeScript options: warnings 1`] = `[]`;

exports[`loader should work for Literate CoffeeScript: errors 1`] = `[]`;

exports[`loader should work for Literate CoffeeScript: source 1`] = `
"  // The **Scope** class regulates lexical scoping within CoffeeScript. As you
  // generate code, you create a tree of scopes in the same shape as the nested
  // function bodies. Each scope knows about the variables declared within it,
  // and has a reference to its parent enclosing scope. In this way, we know which
  // variables are new and need to be declared with \`var\`, and which are shared
  // with external scopes.
var Scope,
  indexOf = [].indexOf;

exports.Scope = Scope = class Scope {
  // Initialize a scope with its parent, for lookups up the chain,
  // as well as a reference to the **Block** node it belongs to, which is
  // where it should declare its variables, a reference to the function that
  // it belongs to, and a list of variables referenced in the source code
  // and therefore should be avoided when generating variables. Also track comments
  // that should be output as part of variable declarations.
  constructor(parent, expressions, method, referencedVars) {
    var ref, ref1;
    this.parent = parent;
    this.expressions = expressions;
    this.method = method;
    this.referencedVars = referencedVars;
    this.variables = [
      {
        name: 'arguments',
        type: 'arguments'
      }
    ];
    this.comments = {};
    this.positions = {};
    if (!this.parent) {
      this.utilities = {};
    }
    // The \`@root\` is the top-level **Scope** object for a given file.
    this.root = (ref = (ref1 = this.parent) != null ? ref1.root : void 0) != null ? ref : this;
  }

  // Adds a new variable or overrides an existing one.
  add(name, type, immediate) {
    if (this.shared && !immediate) {
      return this.parent.add(name, type, immediate);
    }
    if (Object.prototype.hasOwnProperty.call(this.positions, name)) {
      return this.variables[this.positions[name]].type = type;
    } else {
      return this.positions[name] = this.variables.push({name, type}) - 1;
    }
  }

  // When \`super\` is called, we need to find the name of the current method we're
  // in, so that we know how to invoke the same method of the parent class. This
  // can get complicated if super is being called from an inner function.
  // \`namedMethod\` will walk up the scope tree until it either finds the first
  // function object that has a name filled in, or bottoms out.
  namedMethod() {
    var ref;
    if (((ref = this.method) != null ? ref.name : void 0) || !this.parent) {
      return this.method;
    }
    return this.parent.namedMethod();
  }

  // Look up a variable name in lexical scope, and declare it if it does not
  // already exist.
  find(name, type = 'var') {
    if (this.check(name)) {
      return true;
    }
    this.add(name, type);
    return false;
  }

  // Reserve a variable name as originating from a function parameter for this
  // scope. No \`var\` required for internal references.
  parameter(name) {
    if (this.shared && this.parent.check(name, true)) {
      return;
    }
    return this.add(name, 'param');
  }

  // Just check to see if a variable has already been declared, without reserving,
  // walks up to the root scope.
  check(name) {
    var ref;
    return !!(this.type(name) || ((ref = this.parent) != null ? ref.check(name) : void 0));
  }

  // Generate a temporary variable name at the given index.
  temporary(name, index, single = false) {
    var diff, endCode, letter, newCode, num, startCode;
    if (single) {
      startCode = name.charCodeAt(0);
      endCode = 'z'.charCodeAt(0);
      diff = endCode - startCode;
      newCode = startCode + index % (diff + 1);
      letter = String.fromCharCode(newCode);
      num = Math.floor(index / (diff + 1));
      return \`\${letter}\${num || ''}\`;
    } else {
      return \`\${name}\${index || ''}\`;
    }
  }

  // Gets the type of a variable.
  type(name) {
    var i, len, ref, v;
    ref = this.variables;
    for (i = 0, len = ref.length; i < len; i++) {
      v = ref[i];
      if (v.name === name) {
        return v.type;
      }
    }
    return null;
  }

  // If we need to store an intermediate result, find an available name for a
  // compiler-generated variable. \`_var\`, \`_var2\`, and so on...
  freeVariable(name, options = {}) {
    var index, ref, temp;
    index = 0;
    while (true) {
      temp = this.temporary(name, index, options.single);
      if (!(this.check(temp) || indexOf.call(this.root.referencedVars, temp) >= 0)) {
        break;
      }
      index++;
    }
    if ((ref = options.reserve) != null ? ref : true) {
      this.add(temp, 'var', true);
    }
    return temp;
  }

  // Ensure that an assignment is made at the top of this scope
  // (or at the top-level scope, if requested).
  assign(name, value) {
    this.add(name, {
      value,
      assigned: true
    }, true);
    return this.hasAssignments = true;
  }

  // Does this scope have any declared variables?
  hasDeclarations() {
    return !!this.declaredVariables().length;
  }

  // Return the list of variables first declared in this scope.
  declaredVariables() {
    var v;
    return ((function() {
      var i, len, ref, results;
      ref = this.variables;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        v = ref[i];
        if (v.type === 'var') {
          results.push(v.name);
        }
      }
      return results;
    }).call(this)).sort();
  }

  // Return the list of assignments that are supposed to be made at the top
  // of this scope.
  assignedVariables() {
    var i, len, ref, results, v;
    ref = this.variables;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      v = ref[i];
      if (v.type.assigned) {
        results.push(\`\${v.name} = \${v.type.value}\`);
      }
    }
    return results;
  }

};
"
`;

exports[`loader should work for Literate CoffeeScript: sourceMap 1`] = `undefined`;

exports[`loader should work for Literate CoffeeScript: warnings 1`] = `[]`;

exports[`loader should work: errors 1`] = `[]`;

exports[`loader should work: source 1`] = `
"var cubes, list, math, num, number, opposite, race, square;

import * as local from './local-file.coffee';

number = 42;

opposite = true;

if (opposite) {
  // Conditions:
  number = -42;
}

// Functions:
square = function(x) {
  return x * x;
};

// Arrays:
list = [1, 2, 3, 4, 5];

// Objects:
math = {
  root: Math.sqrt,
  square: square,
  cube: function(x) {
    return x * square(x);
  }
};

// Splats:
race = function(winner, ...runners) {
  return print(winner, runners);
};

if (typeof elvis !== "undefined" && elvis !== null) {
  // Existence:
  alert("I knew it!");
}

// Array comprehensions:
cubes = (function() {
  var i, len, results;
  results = [];
  for (i = 0, len = list.length; i < len; i++) {
    num = list[i];
    results.push(math.cube(num));
  }
  return results;
})();

export default {number, opposite, square, list, math, race, cubes, local};
"
`;

exports[`loader should work: sourceMap 1`] = `undefined`;

exports[`loader should work: warnings 1`] = `[]`;
